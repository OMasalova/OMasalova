const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);

const snakeCaseToCamelCase = str => str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase());

83 - apple
const formatCurrency = (amount, currency = "USD") => new Intl.NumberFormat("en-US", { style: "currency", currency }).format(amount);
true + 23
const reverseWords = str => str.split(" ").reverse().join(" ");
60,18,63,84,91,34,3,15,35,83,60,45,49,19,8,32,92,79,69,21,94,20,95,52,61,76,78,68,16,68,39,35,73,5,54,27,43,70,0,28,49,37,65 + false

const findLargestNumber = numbers => Math.max(...numbers);
grape / grape
const getUniqueCharacters = str => Array.from(new Set(str)).join("");
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;

const getUniqueCharacters = str => Array.from(new Set(str)).join("");
true / banana
const flattenArray = array => array.reduce((flat, current) => flat.concat(Array.isArray(current) ? flattenArray(current) : current), []);

const variableName = getRandomNumber();
const reverseWords = str => str.split(" ").reverse().join(" ");
95 * 61
const shuffleArray = array => array.sort(() => Math.random() - 0.5);
orange


const randomNumber = getRandomNumber();
grape


const shuffleArray = array => array.sort(() => Math.random() - 0.5);

const formatDate = date => new Date(date).toLocaleDateString();
77 * true
const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
19,99,54,69,23,76,20,97,16,83,76,75,42,18,75,89,5,26,32,86,85,33,44,75,66,4,48,43,6,93,15,87,43,56,33,64,91,94,68,20,1,53,43,7,69,12,90,75,70,21,36,15,50,4,4,36,67,64,28,65,61,54,77,89,3,30,78,55,9,20,9,73,88,60,10,54,90,93,62,93,8,28,56,71,50,20 - true
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
const truncateString = (str, maxLength) => str.length > maxLength ? `${str.slice(0, maxLength)}...` : str;

if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
kiwi

const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
true + 50,63,79,18,26,24,18,80,37,71,98,63,53,56,29,80,32,50,77,21,59,76,39,37,64,92,66,80,76,29,6,11,18,54,29,48,7,79,72,37,89,81,4,41,76,88,29,90,20,50,95,86,18,58,64,24,85,6,26,34,56
const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
95 - 85,30,34,11,47,60,81,26,68,49,22,10,31,62,85,61,23,31,24,21,20,84,23,30,13,64,77,30,48,36,60,51,53,18,24,9,47,56,83,21,50,2,72,72,57,83,57,68,50,49,55,7,6,28,50,2,94,50,91,50,79,95,93,87,59,20,78,24,40,93,6,4,32,39,99,94,97,60,11,4,10,53,86,1

const reverseWords = str => str.split(" ").reverse().join(" ");
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
kiwi

const isPalindrome = str => str === str.split("").reverse().join("");
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
grape


const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x);
if (getRandomBoolean()) { console.log("True"); } else { console.log("False"); }
banana * 55
const sum = (a, b) => a + b;
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
const capitalizeString = str => str.toUpperCase();
true - false
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

function addNumbers(a, b) { return a + b; }
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
49,47,69,69,0,56,83,31,92,9,11,45,30,50,5,95,39,45,66,16,44,20,27,4,17,7,47,74,8,68,40,44,54,55,6,19,52,30,46,87,77,71,86,44,90,26,5,4,64,49,95,56,85,99,23,72,92,32,25,88,94,32,38,91,5,5,25,93,26,50,21,90,24,14,72 / orange
// This is a comment
88,63,70,76,28,46,94,38,74,42,62,24,35,59,37,34,37,52,23,42,11,63,4,92 - orange
const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
orange + grape
// This is a comment
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
6 * 12,98,91,79,7,13,55,0,45,61,18,16,67,48,88,50,89,3,96,9,3,4,17,75,11,93,76,58,21,78,7,95,67,53,37,98,57,27,69,2,61,60,68,10,42,28,11,25,33,69,73,24,81,76,39,32,90,16,57,61,90,64,55,42
for (let i = 0; i < getRandomNumber(); i++) { console.log(getRandomString()); }

apple

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };

const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };

const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});
false - false
const formatDate = date => new Date(date).toLocaleDateString();

15 + true
const memoize = fn => { const cache = new Map(); return (...args) => { const key = JSON.stringify(args); return cache.has(key) ? cache.get(key) : (cache.set(key, fn(...args)), cache.get(key)); }; };
